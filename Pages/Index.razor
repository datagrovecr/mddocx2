@page "/"
@using DocumentFormat.OpenXml.Packaging;
@using DocumentFormat.OpenXml.Wordprocessing;
@using DocumentFormat.OpenXml;
@using System.Text;
@using System.IO
@inject IJSRuntime JS

<PageTitle>Index</PageTitle>

Select your Docx file. File is processed locally and remains private.

<InputFile OnChange="@LoadFiles" multiple accept='.docx' />

<p> @status</p>
<p> @text </p>
<button @onclick="DownloadFileFromStream">
    Download File From Stream
</button>

@code {
    private string[] files = new string[] { "none selected" };
    private string status = "";

    private string text = "";
    private Stream GetFileStream()
    {

        string md = @"# markdown

- is cool?
- is cheap!
";

        var fileStream = new MemoryStream(Encoding.UTF8.GetBytes(md ?? string.Empty));

        return fileStream;
    }

    private async Task DownloadFileFromStream()
    {
        var fileStream = GetFileStream();
        var fileName = "sample.md";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        status += "\nChanged";
        try
        {
            var buffer = new byte[4096];
            foreach (var file in e.GetMultipleFiles(e.FileCount))
            {
                status += "\nReading file: " + file.Name;
                _ = InvokeAsync(StateHasChanged);

                using var stream = file.OpenReadStream(maxAllowedSize: long.MaxValue);
                @* while (true)
                    {
                    var read = await stream.ReadAsync(buffer);
                    if (read == 0)
                    break;
                    } *@

                WordprocessingDocument wordDoc = WordprocessingDocument.Open(stream, false);
                DocumentFormat.OpenXml.Wordprocessing.Body body
                = wordDoc.MainDocumentPart.Document.Body;
                var totaltext = body.InnerText;
                text += totaltext;
            }
            status = "done";
        }
        catch (Exception ex)
        {
            status += "\nError: " + ex.Message;
            _ = InvokeAsync(StateHasChanged);
        }
        var memoryStream = new MemoryStream();
        @* browserFile.OpenReadStream().CopyToAsync(memoryStream);
            await blobContainerClient.UploadBlobAsync(
            trustedFilename, memoryStream)); *@
    }
}
